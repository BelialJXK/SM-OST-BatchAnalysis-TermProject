server.port=8088

spring.datasource.url=jdbc:mysql://localhost:3306/db_schoolweb?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#============== kafka ===================
# Specify the address of the kafka server, with multiple cluster configurations, separated by commas
spring.kafka.bootstrap-servers=localhost:9092 

#=============== provider  =======================
# When writing fails, the number of retries. When the leader node fails, a repli node will replace to become the leader node. At this time, write failure may occur.
# When retris is 0, produce will not repeat. Retirs are retransmitted. At this time, the repli node becomes the leader node completely, and no message loss occurs.
spring.kafka.producer.retries=0
# The number of messages sent in batches each time, produce accumulates a certain amount of data, and send it at once
spring.kafka.producer.batch-size=16384
# produce accumulates data and sends it once, and sends the data when the buffer size reaches buffer.memory
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.acks=1

# Specify the encoding and decoding method of the message key and message body
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#=============== consumer  =======================
# Specify the default consumer group id --> Because in Kafka, consumers in the same group will not read the same message, rely on groud.id to set the group name
spring.kafka.consumer.group-id=testGroup
# Only the smallest and largest are valid. If the smallest restarts to 0, read from the logfile offset if the largest. In general, we set the smallest
spring.kafka.consumer.auto-offset-reset=earliest
# enable.auto.commit:true --> Set automatic submission offset
spring.kafka.consumer.enable-auto-commit=false
#If'enable.auto.commit' is true, the frequency (in milliseconds) that the consumer offset is automatically submitted to Kafka, the default value is 5000.
spring.kafka.consumer.auto-commit-interval=100
# Specify the encoding and decoding method of the message key and message body
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer